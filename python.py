# python.py - Phi√™n b·∫£n Ho√†n ch·ªânh v√† S·ª≠a l·ªói

import streamlit as st
import pandas as pd
import numpy as np
# C·∫ßn import numpy_financial v√¨ c√°c h√†m npv/irr ƒë√£ b·ªã lo·∫°i kh·ªèi numpy
# import numpy_financial as npf 
from google import genai
from google.genai.errors import APIError
from docx import Document
import io
import re

# C·∫•u h√¨nh API key cho Google Gemini
# N√™n s·ª≠ d·ª•ng st.secrets ƒë·ªÉ l∆∞u key an to√†n
try:
    genai.configure(api_key=st.secrets["GEMINI_API_KEY"])
except KeyError:
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y kh√≥a API 'GEMINI_API_KEY' trong Streamlit Secrets. Vui l√≤ng th√™m kh√≥a c·ªßa b·∫°n.")
    st.stop()
except Exception as e:
    st.error(f"ƒê√£ x·∫£y ra l·ªói khi c·∫•u h√¨nh API: {e}")
    st.stop()

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="Ph√¢n T√≠ch Ph∆∞∆°ng √Ån Kinh Doanh üöÄ",
    layout="wide"
)

st.title("·ª®ng d·ª•ng Ph√¢n T√≠ch Ph∆∞∆°ng √Ån Kinh Doanh (PVT-Pro) üìä")
st.markdown("S·ª≠ d·ª•ng AI ƒë·ªÉ t·ª± ƒë·ªông tr√≠ch xu·∫•t d·ªØ li·ªáu, t√≠nh to√°n v√† ph√¢n t√≠ch hi·ªáu qu·∫£ d·ª± √°n t·ª´ file Word.")

# --- C√°c h√†m x·ª≠ l√Ω c·ªët l√µi ---

# 1. H√†m tr√≠ch xu·∫•t th√¥ng tin b·∫±ng AI t·ª´ file Word
def extract_project_info_ai(doc_content):
    """S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ tr√≠ch xu·∫•t c√°c th√¥ng tin t√†i ch√≠nh t·ª´ n·ªôi dung vƒÉn b·∫£n."""
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh. H√£y ƒë·ªçc v√† tr√≠ch xu·∫•t c√°c th√¥ng tin sau t·ª´ n·ªôi dung vƒÉn b·∫£n d∆∞·ªõi ƒë√¢y. N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin n√†o, h√£y ƒë·ªÉ gi√° tr·ªã l√† 'N/A'.
    H√£y tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·ªôt chu·ªói JSON.
    N·ªôi dung vƒÉn b·∫£n:
    ---
    {doc_content}
    ---
    C·∫•u tr√∫c JSON c·∫ßn tr√≠ch xu·∫•t:
    {{
        "V·ªën ƒë·∫ßu t∆∞": "Gi√° tr·ªã s·ªë",
        "D√≤ng ƒë·ªùi d·ª± √°n": "Gi√° tr·ªã s·ªë (nƒÉm)",
        "Doanh thu": "Gi√° tr·ªã s·ªë (c√≥ th·ªÉ l√† d√≤ng ti·ªÅn h√†ng nƒÉm ho·∫∑c t·ªïng)",
        "Chi ph√≠": "Gi√° tr·ªã s·ªë (c√≥ th·ªÉ l√† d√≤ng ti·ªÅn h√†ng nƒÉm ho·∫∑c t·ªïng)",
        "WACC": "Gi√° tr·ªã s·ªë (%)",
        "Thu·∫ø": "Gi√° tr·ªã s·ªë (%)"
    }}
    """
    model = genai.GenerativeModel('gemini-1.5-flash')
    response = model.generate_content(prompt, stream=True)
    response.resolve()
    
    # Tr√≠ch xu·∫•t chu·ªói JSON t·ª´ ph·∫£n h·ªìi
    json_string = response.text.strip().replace('```json', '').replace('```', '')
    
    # X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn trong chu·ªói JSON
    try:
        # C·ªë g·∫Øng t·∫£i JSON
        import json
        return json.loads(json_string)
    except json.JSONDecodeError as e:
        # X·ª≠ l√Ω khi JSON kh√¥ng h·ª£p l·ªá, c·ªë g·∫Øng tr√≠ch xu·∫•t th·ªß c√¥ng
        st.warning("AI ph·∫£n h·ªìi kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá. ƒêang c·ªë g·∫Øng tr√≠ch xu·∫•t th·ªß c√¥ng.")
        
        extracted_data = {}
        # S·ª≠ d·ª•ng bi·ªÉu th·ª©c ch√≠nh quy ƒë·ªÉ t√¨m c√°c gi√° tr·ªã
        patterns = {
            "V·ªën ƒë·∫ßu t∆∞": r'"V·ªën ƒë·∫ßu t∆∞":\s*"(.*?)"',
            "D√≤ng ƒë·ªùi d·ª± √°n": r'"D√≤ng ƒë·ªùi d·ª± √°n":\s*"(.*?)"',
            "Doanh thu": r'"Doanh thu":\s*"(.*?)"',
            "Chi ph√≠": r'"Chi ph√≠":\s*"(.*?)"',
            "WACC": r'"WACC":\s*"(.*?)"',
            "Thu·∫ø": r'"Thu·∫ø":\s*"(.*?)"'
        }
        for key, pattern in patterns.items():
            match = re.search(pattern, json_string)
            if match:
                extracted_data[key] = match.group(1)
            else:
                extracted_data[key] = "N/A"
        return extracted_data

# 2. H√†m t√≠nh to√°n c√°c ch·ªâ s·ªë t√†i ch√≠nh
def calculate_financial_metrics(cf, wacc):
    """T√≠nh to√°n NPV, IRR, PP v√† DPP."""
    # cf: cash flow (d√≤ng ti·ªÅn)
    # wacc: weighted average cost of capital
    
    cf_df = pd.DataFrame(cf, columns=['NƒÉm', 'D√≤ng ti·ªÅn'])
    
    # T√≠nh NPV (Net Present Value)
    npv = sum(cf_df['D√≤ng ti·ªÅn'].iloc[i] / (1 + wacc)**i for i in range(1, len(cf_df))) - abs(cf_df['D√≤ng ti·ªÅn'].iloc[0])

    # T√≠nh IRR (Internal Rate of Return)
    try:
        from scipy.optimize import newton
        def irr_equation(irr):
            return sum(cf_df['D√≤ng ti·ªÅn'].iloc[i] / (1 + irr)**i for i in range(1, len(cf_df))) - abs(cf_df['D√≤ng ti·ªÅn'].iloc[0])
        irr = newton(irr_equation, x0=wacc)
    except (RuntimeError, ValueError):
        irr = float('nan') # Kh√¥ng t√≠nh ƒë∆∞·ª£c IRR

    # T√≠nh PP (Payback Period)
    cumulative_cf = [cf_df['D√≤ng ti·ªÅn'].iloc[0]]
    for i in range(1, len(cf_df)):
        cumulative_cf.append(cumulative_cf[i-1] + cf_df['D√≤ng ti·ªÅn'].iloc[i])
    
    pp = "N/A"
    for i in range(1, len(cumulative_cf)):
        if cumulative_cf[i] >= 0:
            if cumulative_cf[i-1] < 0:
                pp = (i-1) + abs(cumulative_cf[i-1]) / cf_df['D√≤ng ti·ªÅn'].iloc[i]
            else:
                pp = i-1
            break
            
    # T√≠nh DPP (Discounted Payback Period)
    discounted_cf = [cf_df['D√≤ng ti·ªÅn'].iloc[i] / (1 + wacc)**i for i in range(1, len(cf_df))]
    discounted_cf.insert(0, cf_df['D√≤ng ti·ªÅn'].iloc[0])
    
    cumulative_dcf = [discounted_cf[0]]
    for i in range(1, len(discounted_cf)):
        cumulative_dcf.append(cumulative_dcf[i-1] + discounted_cf[i])
        
    dpp = "N/A"
    for i in range(1, len(cumulative_dcf)):
        if cumulative_dcf[i] >= 0:
            if cumulative_dcf[i-1] < 0:
                dpp = (i-1) + abs(cumulative_dcf[i-1]) / discounted_cf[i]
            else:
                dpp = i-1
            break

    return npv, irr, pp, dpp

# 3. H√†m ph√¢n t√≠ch ch·ªâ s·ªë b·∫±ng AI
def analyze_metrics_ai(npv, irr, pp, dpp, wacc):
    """S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ ph√¢n t√≠ch c√°c ch·ªâ s·ªë t√†i ch√≠nh."""
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ª± √°n ƒë·∫ßu t∆∞. D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n sau, h√£y ƒë∆∞a ra m·ªôt nh·∫≠n x√©t chuy√™n nghi·ªáp v√† kh√°ch quan. Nh·∫≠n x√©t c·∫ßn ng·∫Øn g·ªçn, t·∫≠p trung v√†o vi·ªác li·ªáu d·ª± √°n c√≥ kh·∫£ thi hay kh√¥ng.

    C√°c ch·ªâ s·ªë c·∫ßn ph√¢n t√≠ch:
    - NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng): {npv:,.2f}
    - IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi t·∫°i): {irr:.2%}
    - WACC (Chi ph√≠ v·ªën b√¨nh qu√¢n): {wacc:.2%}
    - PP (Th·ªùi gian ho√†n v·ªën): {pp:.2f} nƒÉm
    - DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u): {dpp:.2f} nƒÉm

    ƒê√°nh gi√° d·ª±a tr√™n c√°c ti√™u ch√≠ sau:
    1. NPV > 0: D·ª± √°n kh·∫£ thi.
    2. IRR > WACC: D·ª± √°n c√≥ l·ª£i nhu·∫≠n cao h∆°n chi ph√≠ v·ªën.
    3. PP v√† DPP: D·ª± √°n ho√†n v·ªën nhanh hay ch·∫≠m?
    """
    model = genai.GenerativeModel('gemini-1.5-flash')
    response = model.generate_content(prompt, stream=True)
    response.resolve()
    return response.text

# --- Giao di·ªán v√† Lu·ªìng ·ª®ng d·ª•ng ---
uploaded_file = st.file_uploader(
    "1. T·∫£i l√™n file Word (.docx) ch·ª©a ph∆∞∆°ng √°n kinh doanh",
    type=['docx']
)

# Kh·ªüi t·∫°o tr·∫°ng th√°i phi√™n
if 'project_info' not in st.session_state:
    st.session_state.project_info = None
if 'cash_flow_data' not in st.session_state:
    st.session_state.cash_flow_data = None
if 'metrics' not in st.session_state:
    st.session_state.metrics = None
    
# Ch·ª©c nƒÉng 1: L·ªçc th√¥ng tin d·ª± √°n b·∫±ng AI
if uploaded_file:
    st.success("File ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng!")
    
    if st.button("Tr√≠ch xu·∫•t th√¥ng tin b·∫±ng AI", key="extract_button"):
        with st.spinner('ƒêang ƒë·ªçc v√† ph√¢n t√≠ch file...'):
            try:
                doc = Document(uploaded_file)
                full_text = " ".join([paragraph.text for paragraph in doc.paragraphs])
                
                # Tr√≠ch xu·∫•t th√¥ng tin
                st.session_state.project_info = extract_project_info_ai(full_text)
                st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu ho√†n t·∫•t!")

            except Exception as e:
                st.error(f"C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file: {e}")

if st.session_state.project_info:
    st.subheader("2. Th√¥ng tin d·ª± √°n ƒë√£ tr√≠ch xu·∫•t")
    # Hi·ªÉn th·ªã c√°c th√¥ng tin ƒë√£ tr√≠ch xu·∫•t
    col1, col2 = st.columns(2)
    with col1:
        st.metric("V·ªën ƒë·∫ßu t∆∞", st.session_state.project_info.get("V·ªën ƒë·∫ßu t∆∞", "N/A"))
        st.metric("D√≤ng ƒë·ªùi d·ª± √°n", st.session_state.project_info.get("D√≤ng ƒë·ªùi d·ª± √°n", "N/A"))
        st.metric("WACC", st.session_state.project_info.get("WACC", "N/A"))
    with col2:
        st.metric("Doanh thu", st.session_state.project_info.get("Doanh thu", "N/A"))
        st.metric("Chi ph√≠", st.session_state.project_info.get("Chi ph√≠", "N/A"))
        st.metric("Thu·∫ø", st.session_state.project_info.get("Thu·∫ø", "N/A"))
        
    st.info("‚ö†Ô∏è Vui l√≤ng ki·ªÉm tra v√† ch·ªânh s·ª≠a c√°c gi√° tr·ªã tr√™n cho ch√≠nh x√°c tr∆∞·ªõc khi t√≠nh to√°n.")
    
    # Th√™m form cho ng∆∞·ªùi d√πng ch·ªânh s·ª≠a v√† nh·∫≠p li·ªáu th·ªß c√¥ng
    with st.expander("Ch·ªânh s·ª≠a d·ªØ li·ªáu (n·∫øu c·∫ßn)"):
        st.session_state.project_info["V·ªën ƒë·∫ßu t∆∞"] = st.number_input("V·ªën ƒë·∫ßu t∆∞", value=float(st.session_state.project_info.get("V·ªën ƒë·∫ßu t∆∞", 0).replace(',', '').replace(' VND', '')), format="%.0f")
        st.session_state.project_info["D√≤ng ƒë·ªùi d·ª± √°n"] = st.number_input("D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)", value=int(st.session_state.project_info.get("D√≤ng ƒë·ªùi d·ª± √°n", 1)), format="%d")
        st.session_state.project_info["Doanh thu"] = st.number_input("Doanh thu h√†ng nƒÉm", value=float(st.session_state.project_info.get("Doanh thu", 0).replace(',', '').replace(' VND', '')), format="%.0f")
        st.session_state.project_info["Chi ph√≠"] = st.number_input("Chi ph√≠ h√†ng nƒÉm", value=float(st.session_state.project_info.get("Chi ph√≠", 0).replace(',', '').replace(' VND', '')), format="%.0f")
        st.session_state.project_info["WACC"] = st.number_input("WACC (%)", value=float(st.session_state.project_info.get("WACC", 0).replace('%', '')), min_value=0.0, max_value=100.0)
        st.session_state.project_info["Thu·∫ø"] = st.number_input("Thu·∫ø (%)", value=float(st.session_state.project_info.get("Thu·∫ø", 0).replace('%', '')), min_value=0.0, max_value=100.0)
    
    # Ch·ª©c nƒÉng 2: X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn
    if st.button("X√¢y d·ª±ng B·∫£ng d√≤ng ti·ªÅn"):
        try:
            initial_investment = -abs(st.session_state.project_info["V·ªën ƒë·∫ßu t∆∞"])
            project_life = int(st.session_state.project_info["D√≤ng ƒë·ªùi d·ª± √°n"])
            revenue = st.session_state.project_info["Doanh thu"]
            cost = st.session_state.project_info["Chi ph√≠"]
            tax_rate = st.session_state.project_info["Thu·∫ø"] / 100
            
            # T√≠nh to√°n d√≤ng ti·ªÅn h√†ng nƒÉm (v√≠ d·ª• ƒë∆°n gi·∫£n)
            cash_flow_annually = (revenue - cost) * (1 - tax_rate)
            
            cash_flow_table = {
                'NƒÉm': [0] + list(range(1, project_life + 1)),
                'D√≤ng ti·ªÅn': [initial_investment] + [cash_flow_annually] * project_life
            }
            st.session_state.cash_flow_data = cash_flow_table
            
        except Exception as e:
            st.error(f"L·ªói khi t·∫°o b·∫£ng d√≤ng ti·ªÅn: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c gi√° tr·ªã ƒë·∫ßu v√†o.")

if st.session_state.cash_flow_data:
    st.subheader("3. B·∫£ng D√≤ng ti·ªÅn D·ª± √°n")
    df_cf = pd.DataFrame(st.session_state.cash_flow_data)
    st.dataframe(df_cf.style.format({'D√≤ng ti·ªÅn': '{:,.0f}'}), use_container_width=True)

    # Ch·ª©c nƒÉng 3: T√≠nh to√°n c√°c ch·ªâ s·ªë
    if st.button("T√≠nh to√°n c√°c Ch·ªâ s·ªë Hi·ªáu qu·∫£"):
        try:
            wacc = st.session_state.project_info["WACC"] / 100
            npv, irr, pp, dpp = calculate_financial_metrics(st.session_state.cash_flow_data, wacc)
            st.session_state.metrics = {
                "NPV": npv,
                "IRR": irr,
                "PP": pp,
                "DPP": dpp,
                "WACC": wacc
            }
            st.success("ƒê√£ t√≠nh to√°n xong c√°c ch·ªâ s·ªë!")
        except Exception as e:
            st.error(f"L·ªói khi t√≠nh to√°n ch·ªâ s·ªë: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c gi√° tr·ªã ƒë·∫ßu v√†o.")

if st.session_state.metrics:
    st.subheader("4. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("NPV", f"{st.session_state.metrics['NPV']:,.2f}")
    col2.metric("IRR", f"{st.session_state.metrics['IRR']:.2%}" if not pd.isna(st.session_state.metrics['IRR']) else "N/A")
    col3.metric("PP (nƒÉm)", f"{st.session_state.metrics['PP']:.2f}")
    col4.metric("DPP (nƒÉm)", f"{st.session_state.metrics['DPP']:.2f}")

    # Ch·ª©c nƒÉng 4: Ph√¢n t√≠ch ch·ªâ s·ªë b·∫±ng AI
    if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch"):
        with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini ph√¢n t√≠ch...'):
            try:
                ai_analysis = analyze_metrics_ai(
                    st.session_state.metrics['NPV'],
                    st.session_state.metrics['IRR'],
                    st.session_state.metrics['PP'],
                    st.session_state.metrics['DPP'],
                    st.session_state.metrics['WACC']
                )
                st.markdown("---")
                st.subheader("5. K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI")
                st.info(ai_analysis)
            except Exception as e:
                st.error(f"L·ªói khi y√™u c·∫ßu ph√¢n t√≠ch AI: {e}")

st.markdown("---")
st.markdown("Ph√°t tri·ªÉn b·ªüi ü§ñ Chuy√™n gia l·∫≠p tr√¨nh Streamlit.")
